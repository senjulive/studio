'use client';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { LoadingSpinner } from '@/components/ui/loading-spinner';
import { Badge } from '@/components/ui/badge';
import { RefreshCw, Users, TrendingUp, MessageSquare, Trophy } from 'lucide-react';

interface SystemStats {
  totalUsers: number;
  analytics: {
    totalDeposits: number;
    totalWithdrawals: number;
    totalGridEarnings: number;
    netInflow: number;
    rankDistribution: Record<string, number>;
    leaderboard: Array<{
      userId: string;
      username: string;
      balance: number;
      rank: string;
    }>;
  };
  publicChatMessageCount: number;
  metadata: {
    fetchedAt: string;
  };
}

export function DataOverview() {
  const [stats, setStats] = useState<SystemStats | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchStats = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch('/api/admin/fetch-all-data?type=stats');
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      const result = await response.json();
      setStats(result);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch data');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchStats();
  }, []);

  if (loading && !stats) {
    return (
      <div className="flex items-center justify-center p-8">
        <LoadingSpinner />
        <span className="ml-2">Loading platform overview...</span>
      </div>
    );
  }

  if (error) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="text-center text-red-500">
            Error loading data: {error}
          </div>
          <Button onClick={fetchStats} className="mt-4 mx-auto block">
            Try Again
          </Button>
        </CardContent>
      </Card>
    );
  }

  if (!stats) return null;

  const topRanks = Object.entries(stats.analytics.rankDistribution)
    .filter(([, count]) => count > 0)
    .sort(([, a], [, b]) => b - a)
    .slice(0, 3);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Platform Overview</h2>
          <p className="text-muted-foreground">
            Real-time statistics and community insights
          </p>
        </div>
        <Button onClick={fetchStats} disabled={loading} variant="outline" size="sm">
          <RefreshCw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
          Refresh
        </Button>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Users</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalUsers}</div>
            <p className="text-xs text-muted-foreground">
              Active community members
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Platform Volume</CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">${stats.analytics.totalDeposits}</div>
            <p className="text-xs text-muted-foreground">
              Total deposits processed
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Grid Earnings</CardTitle>
            <Trophy className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">${stats.analytics.totalGridEarnings}</div>
            <p className="text-xs text-muted-foreground">
              Generated by AI trading
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Community Chat</CardTitle>
            <MessageSquare className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.publicChatMessageCount}</div>
            <p className="text-xs text-muted-foreground">
              Public messages
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Detailed Sections */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Rank Distribution */}
        <Card>
          <CardHeader>
            <CardTitle>Community Rankings</CardTitle>
            <CardDescription>Distribution of user ranks</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {topRanks.map(([rank, count]) => (
                <div key={rank} className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Badge variant="outline">{rank}</Badge>
                  </div>
                  <span className="font-mono text-sm">{count} users</span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Top Performers */}
        <Card>
          <CardHeader>
            <CardTitle>Top Performers</CardTitle>
            <CardDescription>Leading community members</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {stats.analytics.leaderboard.slice(0, 5).map((user, index) => (
                <div key={user.userId} className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Badge variant="outline">#{index + 1}</Badge>
                    <span className="font-medium">{user.username}</span>
                  </div>
                  <div className="text-right">
                    <p className="font-mono text-sm">${user.balance.toFixed(2)}</p>
                    <p className="text-xs text-muted-foreground">{user.rank}</p>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Platform Health */}
      <Card>
        <CardHeader>
          <CardTitle>Platform Health</CardTitle>
          <CardDescription>Key financial metrics</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="text-center p-4 bg-muted/50 rounded-lg">
              <div className="text-2xl font-bold text-green-600">
                ${stats.analytics.netInflow}
              </div>
              <div className="text-sm text-muted-foreground">Net Inflow</div>
            </div>
            <div className="text-center p-4 bg-muted/50 rounded-lg">
              <div className="text-2xl font-bold">
                ${stats.analytics.totalWithdrawals}
              </div>
              <div className="text-sm text-muted-foreground">Total Withdrawals</div>
            </div>
            <div className="text-center p-4 bg-muted/50 rounded-lg">
              <div className="text-2xl font-bold text-blue-600">
                {(stats.analytics.totalGridEarnings / Math.max(stats.analytics.totalDeposits, 1) * 100).toFixed(1)}%
              </div>
              <div className="text-sm text-muted-foreground">ROI Generated</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Last Updated */}
      <div className="text-center text-sm text-muted-foreground">
        Last updated: {new Date(stats.metadata.fetchedAt).toLocaleString()}
      </div>
    </div>
  );
}
